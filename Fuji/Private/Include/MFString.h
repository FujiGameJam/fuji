/**
 * @file MFString.h
 * @brief Mount Fuji string funcitons.
 * Provides a set of useful string management functions.
 * @author Manu Evans
 * @defgroup MFString String Functions
 * @{
 */

#if !defined(_MFSTRING_H)
#define _MFSTRING_H

/**
 * Compares 2 strings.
 * Compares 2 strings and returns the difference between them.
 * @param pString1 First source string.
 * @param pString2 Second source string.
 * @return Returns the difference between the 2 strings. 0 if the strings are identical.
 * @see MFString_CaseCmpN()
 */
int MFString_CaseCmp(const char *pString1, const char *pString2);

/**
 * Compares 2 strings with a maximum character limit.
 * Compares 2 strings with a maximum character limit and returns the difference between them.
 * @param pString1 First source string.
 * @param pString2 Second source string.
 * @param n Maximum number of characters to compare.
 * @return Returns the difference between the 2 strings. 0 if the strings are identical.
 * @see MFString_CaseCmp()
 */
int MFString_CaseCmpN(const char *pString1, const char *pString2, uint32 n);

/**
 * Searches backwards through a string for the specified character.
 * Searches backwards through a string for the specified character.
 * @param pString String to search.
 * @param c Character to search for.
 * @return Returns a pointer to the last instance of the character \a c in \a pString.
 * @see MFString_CaseCmp()
 */
char* MFString_RChr(const char *pString, int c);

/**
 * Get a formatted a string.
 * Generates a new string from a format specifier and paramaters.
 * @param format The format string. Supports all the standard formatting provided by the CRT like printf().
 * @param ... Variable argument list.
 * @return Pointer to the newly created string.
 * @remarks MFStr() uses a circular buffer for storing the strings it produces. You should NOT keep a long term string generated by MFStr. MFStr() is best suited to generating temporary and intermediate strings for immediate use.
 * @see MFStrN()
 */
char* MFStr(const char *format, ...);

/**
 * Copy a specified number of characters from one string into a new string.
 * Generates a new string from a format specifier and paramaters.
 * @param source The string from which characters will be copied.
 * @param n Number of characters to copy from the source string.
 * @return Pointer to the newly created string.
 * @remarks MFStrN() uses a circular buffer for storing the strings it produces. You should NOT keep a long term string generated by MFStrN. MFStrN() is best suited to generating temporary and intermediate strings for immediate use.
 * @see MFStrN()
 */
char* MFStrN(const char *source, int n);

/**
 * Test if the specified character is a while space character.
 */
bool MFIsWhite(char c);

/**
 * Test if the specified character is an alphabetic character.
 */
bool MFIsAlpha(char c);

/**
 * Test if the specified character is a numeric character.
 */
bool MFIsNumeric(char c);

/**
 * Test if the specified character is an alphabetic or numeric character.
 */
bool MFIsAlphaNumeric(char c);

/**
 * Test if the specified character is a newline character.
 */
bool MFIsNewline(char c);

/**
 * Converts a character to lower case.
 */
int MFToLower(int c);

/**
 * Converts a character to lower case.
 */
int MFToUpper(int c);

/**
 * Returns a pointer to the start of the next line in the provided string.
 */
char* MFSeekNewline(char *pC);

/**
 * Returns a pointer to the next non-white space character in the provided string.
 */
char* MFSkipWhite(char *pC);

#include "MFString.inl"

#endif // _MFSTRING_H

/** @} */
