TARGET_LIB = Lib/libFuji

ifeq ($(PLATFORM),)
#$(error $$(PLATFORM) is undefined.
PLATFORM = LINUX
endif
ifeq ($(BUILD),)
#$(error $$(BUILD) is undefined.
BUILD = Release
endif

OBJS = Middleware/zlib/adler32.o \
Middleware/zlib/compress.o \
Middleware/zlib/crc32.o \
Middleware/zlib/deflate.o \
Middleware/zlib/gzio.o \
Middleware/zlib/infback.o \
Middleware/zlib/inffast.o \
Middleware/zlib/inflate.o \
Middleware/zlib/inftrees.o \
Middleware/zlib/trees.o \
Middleware/zlib/uncompr.o \
Middleware/zlib/zutil.o \
Middleware/zlib/minizip/ioapi.o \
Middleware/zlib/minizip/mztools.o \
Middleware/zlib/minizip/unzip.o \
Middleware/zlib/minizip/zip.o \
Middleware/angelscript/scriptstring/scriptstring.o \
Middleware/angelscript/source/as_anyobject.o \
Middleware/angelscript/source/as_arrayobject.o \
Middleware/angelscript/source/as_builder.o \
Middleware/angelscript/source/as_bytecode.o \
Middleware/angelscript/source/as_c.o \
Middleware/angelscript/source/as_callfunc.o \
Middleware/angelscript/source/as_callfunc_mips.o \
Middleware/angelscript/source/as_callfunc_sh4.o \
Middleware/angelscript/source/as_callfunc_x86.o \
Middleware/angelscript/source/as_compiler.o \
Middleware/angelscript/source/as_configgroup.o \
Middleware/angelscript/source/as_context.o \
Middleware/angelscript/source/as_datatype.o \
Middleware/angelscript/source/as_gcobject.o \
Middleware/angelscript/source/as_generic.o \
Middleware/angelscript/source/as_module.o \
Middleware/angelscript/source/as_objecttype.o \
Middleware/angelscript/source/as_outputbuffer.o \
Middleware/angelscript/source/as_parser.o \
Middleware/angelscript/source/as_restore.o \
Middleware/angelscript/source/as_scriptcode.o \
Middleware/angelscript/source/as_scriptengine.o \
Middleware/angelscript/source/as_scriptfunction.o \
Middleware/angelscript/source/as_scriptnode.o \
Middleware/angelscript/source/as_scriptstruct.o \
Middleware/angelscript/source/as_string.o \
Middleware/angelscript/source/as_string_util.o \
Middleware/angelscript/source/as_thread.o \
Middleware/angelscript/source/as_tokenizer.o \
Middleware/angelscript/source/as_typeinfo.o \
Middleware/angelscript/source/as_variablescope.o \
Source/DebugMenu.o \
Source/Display.o \
Source/Image.o \
Source/MFBoundingVolume.o \
Source/MFCallstack.o \
Source/MFCollision.o \
Source/MFCommandLine.o \
Source/MFDebug.o \
Source/MFFileSystem.o \
Source/MFFont.o \
Source/MFHeap.o \
Source/MFIni.o \
Source/MFInput.o \
Source/MFMaterial.o \
Source/MFMath.o \
Source/MFMatrix.o \
Source/MFModel.o \
Source/MFNetwork.o \
Source/MFPrimitive.o \
Source/MFRenderer.o \
Source/MFScript.o \
Source/MFScript_Pawn.o \
Source/MFScript_Registration.o \
Source/MFSockets.o \
Source/MFString.o \
Source/MFStringCache.o \
Source/MFSystem.o \
Source/MFTexture.o \
Source/MFTextureUtil.o \
Source/MFTranslation.o \
Source/MFVector.o \
Source/MFView.o \
Source/Sprite.o \
Source/Timer.o \
Source/Util.o \
Source/FileSystem/MFFileSystemHTTP.o \
Source/FileSystem/MFFileSystemMemory.o \
Source/FileSystem/MFFileSystemNative.o \
Source/FileSystem/MFFileSystemZipFile.o \
Source/Materials/MFMat_Effect.o \
Source/Materials/MFMat_Standard.o

ifeq ($(PLATFORM),PSP)
OBJS := $(OBJS) PSP/Display_PSP.o \
PSP/MFDebug_PSP.o \
PSP/MFHeap_PSP.o \
PSP/MFInput_PSP.o \
PSP/MFMaterial_PSP.o \
PSP/MFModel_PSP.o \
PSP/MFPrimitive_PSP.o \
PSP/MFRenderer_PSP.o \
PSP/MFSockets_PSP.o \
PSP/MFSound_PSP.o \
PSP/MFSystem_PSP.o \
PSP/MFTexture_PSP.o \
PSP/MFThread_PSP.o \
PSP/MFTranslation_PSP.o \
PSP/FileSystem/MFFileSystemNative_PSP.o \
PSP/Materials/MFMat_Standard_PSP.o \
Null/Materials/MFMat_Effect_Null.o
endif

ifeq ($(PLATFORM),DC)
OBJS := $(OBJS) DC/Display_DC.o \
DC/MFInput_DC.o \
DC/MFMaterial_DC.o \
DC/MFPrimitive_DC.o \
DC/MFRenderer_DC.o \
DC/MFSound_DC.o \
DC/MFSystem_DC.o \
DC/MFTexture_DC.o \
DC/FileSystem/MFFileSystemNative_DC.o \
DC/Materials/Mat_Standard_DC.o \
Null/Materials/MFMat_Effect_Null.o
endif

ifeq ($(PLATFORM),GC)
OBJS := $(OBJS) GC/Display_GC.o \
GC/MFInput_GC.o \
GC/MFMaterial_GC.o \
GC/MFPrimitive_GC.o \
GC/MFRenderer_GC.o \
GC/MFSound_GC.o \
GC/MFSystem_GC.o \
GC/MFTexture_GC.o \
GC/FileSystem/MFFileSystemNative_GC.o \
GC/Materials/Mat_Standard_GC.o \
Null/Materials/MFMat_Effect_Null.o
endif

ifeq ($(PLATFORM),LINUX)
OBJS := $(OBJS) Linux/MFDebug_Linux.o \
Linux/MFHeap_Linux.o \
Linux/MFInput_Linux.o \
Linux/MFMaterial_Linux.o \
Linux/MFModel_Linux.o \
Linux/MFPrimitive_Linux.o \
Linux/MFSockets_Linux.o \
Linux/MFSound_Linux.o \
Linux/MFSystem_Linux.o \
Linux/MFTexture_Linux.o \
Linux/MFThread_Linux.o \
Linux/MFTranslation_Linux.o \
Linux/FileSystem/MFFileSystemNative_Linux.o \
Linux/Materials/MFMat_Effect_Linux.o \
Linux/Materials/MFMat_Standard_Linux.o \
Linux/Display_Linux.o
endif

ifeq ($(PLATFORM),PS2)
OBJS := $(OBJS) PS2/Display_PS2.o \
PS2/MFInput_PS2.o \
PS2/MFMaterial_PS2.o \
PS2/MFPrimitive_PS2.o \
PS2/MFRenderer_PS2.o \
PS2/MFSound_PS2.o \
PS2/MFSystem_PS2.o \
PS2/MFTexture_PS2.o \
PS2/FileSystem/MFFileSystemNative_PS2.o \
PS2/Materials/Mat_Standard_PS2.o \
Null/Materials/MFMat_Effect_Null.o
endif

ifeq ($(PLATFORM),PC)
OBJS := $(OBJS) PC/Display_PC.o \
PC/MFDebug_PC.o \
PC/MFHeap_PC.o \
PC/MFInputMappings_PC.o \
PC/MFInput_PC.o \
PC/MFMaterial_PC.o \
PC/MFModel_PC.o \
PC/MFPrimitive_PC.o \
PC/MFRenderer_PC.o \
PC/MFSockets_PC.o \
PC/MFSound_PC.o \
PC/MFSystem_PC.o \
PC/MFTexture_PC.o \
PC/MFThread_PC.o \
PC/MFTranslation_PC.o \
PC/FileSystem/MFFileSystemNative_PC.o \
PC/Materials/MFMat_Effect_PC.o \
PC/Materials/MFMat_Standard_PC.o
endif

#XBox/Display_XB.o
#XBox/MFDebug_XB.o
#XBox/MFHeap_XB.o
#XBox/MFInput_XB.o
#XBox/MFMaterial_XB.o
#XBox/MFModel_XB.o
#XBox/MFPrimitive_XB.o
#XBox/MFRenderer_XB.o
#XBox/MFSockets_XB.o
#XBox/MFSound_XB.o
#XBox/MFSystem_XB.o
#XBox/MFTexture_XB.o
#XBox/MFThread_XB.o
#XBox/MFTranslation_XB.o
#XBox/FileSystem/MFFileSystemNative_XB.o
#XBox/Materials/MFMat_Standard_XB.o
#Null/Display_Null.o
#Null/MFDebug_Null.o
#Null/MFHeap_Null.o
#Null/MFInput_Null.o
#Null/MFMaterial_Null.o
#Null/MFModel_Null.o
#Null/MFPrimitive_Null.o
#Null/MFSockets_Null.o
#Null/MFSound_Null.o
#Null/MFSystem_Null.o
#Null/MFTexture_Null.o
#Null/MFThread_Null.o
#Null/MFTranslation_Null.o
#Null/FileSystem/MFFileSystemNative_Null.o
#Null/Materials/MFMat_Effect_Null.o
#Null/Materials/MFMat_Standard_Null.o


ifeq ($(PLATFORM),LINUX)
PLATFORMINCLUDE = Linux
else
PLATFORMINCLUDE = $(PLATFORM)
endif

INCDIR = Include Source $(PLATFORMINCLUDE) Middleware Middleware/zlib Middleware/angelscript/include
CFLAGS = -Wall -D_$(PLATFORM)
CXXFLAGS = -fno-exceptions -fno-rtti
ASFLAGS = 

ifeq ($(BUILD),Debug)
CFLAGS := $(CFLAGS) -D_DEBUG -O0
endif
ifeq ($(BUILD),Release)
CFLAGS := $(CFLAGS) -D_RELEASE -O1
endif
ifeq ($(BUILD),Retail)
CFLAGS := $(CFLAGS) -D_RETAIL -O3
endif


CONFIG = $(BUILD)_$(PLATFORM)
TARGET_LIB := $(TARGET_LIB)_$(CONFIG).a


ifeq ($(PLATFORM),PSP)

PSPSDK=C:/cygwin/usr/local/pspdev/psp/sdk

CC       = psp-gcc
CXX      = psp-g++
AS       = psp-gcc
LD       = psp-gcc
AR       = psp-ar
RANLIB   = psp-ranlib
STRIP    = psp-strip
MKSFO    = mksfo
PACK_PBP = pack-pbp
FIXUP    = psp-fixup-imports

CFLAGS := $(CFLAGS) -G0

# Add in PSPSDK includes and libraries.
INCDIR   := $(INCDIR) . $(PSPSDK)/include

# end PSP
endif

ifeq ($(PLATFORM),GC)

OGC = C:/cygwin/usr/local/devkitPPC/ogc

CC       = powerpc-gekko-gcc
CXX      = powerpc-gekko-g++
AS       = powerpc-gekko-gcc
LD       = powerpc-gekko-gcc
AR       = powerpc-gekko-ar
RANLIB   = powerpc-gekko-ranlib
STRIP    = powerpc-gekko-strip

# Add in OGC includes.
INCDIR   := $(INCDIR) . $(OGC)/include

# end GC
endif

ifeq ($(PLATFORM),LINUX)

CC       = gcc
CXX      = g++
AS       = as
LD       = ld
AR       = ar
RANLIB   = ranlib
STRIP    = strip

# end LINUX
endif

CFLAGS   := $(addprefix -I,$(INCDIR)) $(CFLAGS)
CXXFLAGS := $(CFLAGS) $(CXXFLAGS)
ASFLAGS  := $(CFLAGS) $(ASFLAGS)

FINAL_TARGET = $(TARGET_LIB)

all: $(EXTRA_TARGETS) $(FINAL_TARGET)

$(TARGET_LIB): $(OBJS)
	$(AR) cru $@ $(OBJS)
	$(RANLIB) $@

clean:
	-rm -f $(FINAL_TARGET) $(EXTRA_CLEAN) $(OBJS) $(EXTRA_TARGETS)
